thermostat_away:
  alias: Thermostat to away
  description: Set the thermostat temperature to the configured away temperature
  icon: mdi:thermostat
  mode: single
  sequence:
  - service: climate.turn_off
    target:
      entity_id:
      - climate.bedroom
      - climate.living_room
  - service: climate.set_preset_mode
    target:
      entity_id:
      - climate.office
      - climate.bathroom
      - climate.hallway
    data:
      preset_mode: away
  - service: climate.set_temperature
    target:
      entity_id: climate.tstat_8d728f
    data:
      temperature: 14
thermostat_home:
  alias: Thermostat to home
  description: Set the thermostat temperature to the configured home temperature
  icon: mdi:thermostat
  mode: single
  sequence:
  - service: climate.set_preset_mode
    target:
      entity_id:
      - climate.bathroom
      - climate.office
      - climate.hallway
    data:
      preset_mode: none
  - service: script.reload_climate_automations
home_music:
  alias: Home Music
  sequence:
  - service: media_player.volume_set
    entity_id: media_player.living_room_sonos
    data:
      volume_level: '{{ states(''input_number.home_music_volume_level'') }}'
  - service: media_player.shuffle_set
    data:
      shuffle: true
    entity_id: media_player.living_room_sonos
  - service: media_player.repeat_set
    data:
      repeat: all
    entity_id: media_player.living_room_sonos
  - choose:
    - conditions:
      - condition: state
        entity_id: person.cas_eliens
        state: home
      sequence:
      - service: media_player.select_source
        entity_id: media_player.living_room_sonos
        data:
          source: '{{ states(''input_text.home_music_source_cas'') }}'
    default:
    - service: media_player.select_source
      entity_id: media_player.living_room_sonos
      data:
        source: '{{ states(''input_text.home_music_source_bert'') }}'
  mode: single
  icon: mdi:music
wake_up:
  alias: Wake Up
  icon: mdi:alarm
  sequence:
  - service: script.turn_on
    target:
      entity_id: script.morning_music
  - service: input_boolean.turn_on
    entity_id: input_boolean.woken_up
  - service: switch.turn_on
    target:
      entity_id: switch.adaptive_lighting_bedroom
  - service: input_boolean.turn_on
    target:
      entity_id: input_boolean.living_room_automatic_lights
  mode: single
morning_music:
  alias: Morning Music
  icon: mdi:music
  sequence:
  - service: media_player.shuffle_set
    data:
      shuffle: true
    target:
      entity_id: media_player.living_room_sonos
  - service: media_player.repeat_set
    target:
      entity_id: media_player.living_room_sonos
    data:
      repeat: all
  - service: media_player.volume_set
    target:
      entity_id: media_player.living_room_sonos
    data:
      volume_level: '{{ states(''input_number.home_music_volume_level'') }}'
  - service: media_player.select_source
    target:
      entity_id: media_player.living_room_sonos
    data:
      source: '{{ states(''input_text.morning_music_source'') }}'
  mode: single
doorbell:
  alias: Doorbell
  description: Ring the door bell
  fields:
    count:
      description: How many times to ring the bell
      example: 1
  sequence:
  - service: light.turn_on
    data:
      flash: short
    target:
      entity_id: light.office_ceiling
  - service: script.turn_on
    data: {}
    target:
      entity_id: script.doorbell_light
  - service: sonos.snapshot
    data:
      entity_id: media_player.living_room_sonos
  - service: media_player.media_pause
    target:
      entity_id: media_player.living_room_sonos
    data: {}
  - service: media_player.volume_set
    target:
      entity_id: media_player.living_room_sonos
    data:
      volume_level: 0.25
  - service: media_player.play_media
    data:
      media_content_id: https://assistant.eliens.co/local/doorbell1.wav
      media_content_type: music
    target:
      entity_id:
      - media_player.living_room_sonos
  - service: media_player.play_media
    data:
      media_content_id: media-source://media_source/local/doorbell1.wav
      media_content_type: audio/x-wav
    target:
      entity_id:
      - media_player.office_speaker
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 500
  - service: media_player.repeat_set
    target:
      entity_id: media_player.living_room_sonos
    data:
      repeat: 'off'
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 500
  - service: sonos.restore
    data:
      entity_id: media_player.living_room_sonos
  - condition: state
    entity_id: group.awesome_people
    state: not_home
  - service: notify.mobile_app_cas_phone
    data:
      message: Someone just rang the door bell
      title: Ding Dong ðŸ””
  mode: single
  icon: mdi:bell
  max: 10
reload_climate_automations:
  alias: Execute climate schedules
  sequence:
  - service: scheduler.run_action
    data:
      entity_id: switch.schedule_living_room_heating_friday
  - service: scheduler.run_action
    data:
      entity_id: switch.schedule_living_room_heating_vacation
  - service: scheduler.run_action
    data:
      entity_id: switch.schedule_living_room_heating_weekend
  - service: scheduler.run_action
    data:
      entity_id: switch.schedule_living_room_heating_workdays
  - service: scheduler.run_action
    data:
      entity_id: switch.schedule_bathroom_heating_weekend
  - service: scheduler.run_action
    data:
      entity_id: switch.schedule_bathroom_heating_workdays
  - service: scheduler.run_action
    data:
      entity_id: switch.schedule_office_heating_weekend
  - service: scheduler.run_action
    data:
      entity_id: switch.schedule_office_heating_workdays
  - service: scheduler.run_action
    data:
      entity_id: switch.schedule_office_heating_unoccupied
  - choose:
    - conditions:
      - condition: state
        entity_id: input_select.climate_mode
        state: cool
      sequence:
      - service: climate.turn_off
        target:
          entity_id:
          - climate.tstat_8d728f
          - climate.office
          - climate.hallway
          - climate.bathroom
        data: {}
    default: []
  mode: single
  icon: fapro:sync
thermostat_sleep:
  alias: Thermostat to sleep
  description: Turn off the thermostat for sleep
  icon: mdi:thermostat
  mode: single
  sequence:
  - choose:
    - conditions:
      - condition: state
        entity_id: input_select.climate_mode
        state: heat
      sequence:
      - service: climate.set_temperature
        target:
          entity_id:
          - climate.bathroom
          - climate.office
        data:
          temperature: 16
    - conditions:
      - condition: state
        entity_id: input_select.climate_mode
        state: cool
      sequence:
      - service: climate.turn_off
        target:
          entity_id: climate.living_room
    default: []
flash_light:
  alias: Flash Light
  mode: queued
  icon: mdi:flash_alert_outline
  fields:
    flash_mode:
      name: Flash Mode
      description: Flash mode to use
      required: true
      selector:
        select:
          options:
          - short
          - long
    light_entity:
      name: Lights to flash
      required: true
      selector:
        target:
          entity:
            domain: light
    adaptive_light_entity:
      name: Adaptive light switches to manage
      required: true
      selector:
        target:
          entity:
            domain: switch
  sequence:
  - service: scene.create
    data:
      scene_id: light_flash_state
      snapshot_entities: '{{ light_entity.entity_id }}'
  - service: scene.create
    data:
      scene_id: light_flash_adaptive_state
      snapshot_entities: '{{ adaptive_light_entity.entity_id }}'
  - service: switch.turn_off
    target: '{{ adaptive_light_entity }}'
  - service: light.turn_on
    target: '{{ light_entity }}'
  - delay:
      hours: 0
      minutes: 0
      seconds: 1
      milliseconds: 0
  - service: light.turn_on
    target: '{{ light_entity }}'
    data:
      flash: '{{ flash_mode }}'
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ flash_mode == "short" }}'
      sequence:
      - delay: 1
    - conditions:
      - condition: template
        value_template: '{{ flash_mode == "long" }}'
      sequence:
      - delay: 16
    default: []
  - service: scene.turn_on
    target:
      entity_id:
      - scene.light_flash_state
  - delay:
      hours: 0
      minutes: 0
      seconds: 3
      milliseconds: 0
  - service: scene.turn_on
    target:
      entity_id:
      - scene.light_flash_adaptive_state
  max: 10
zha_store_click:
  alias: Store ZHA click
  description: Store the most recent ZHA event
  mode: queued
  sequence:
  - service: input_text.set_value
    data_template:
      entity_id: input_text.zha_click
      value: "{%- set data = states(\"input_text.zha_click\").split(\",\") %} {%-\
        \ set previous_device = data[0]|trim %} {%- set previous_command = data[1]|trim\
        \ %} {%- set click = as_timestamp(now())|float %} {%- set previous_click =\
        \ data[2]|float %} {%- set click_delta = click - previous_click %} {%- set\
        \ click_count = data[3]|int %} {{- device|trim }}, {{- command|trim }}, {{-\
        \ click }}, {%- if click_delta <= 0.5 and previous_device == device|trim and\
        \ previous_command == command %}\n  {{- click_count + 1 }}\n{%- else %}\n\
        \  {{- 1 }}\n{%- endif %}"
determine_alarm_light_fade_time:
  alias: Determine alarm light fade time
  description: Figure out the time when the bedroom lights should start fading to
    on
  mode: single
  variables:
    bertTime: '{{ states(''sensor.bert_phone_next_alarm'') | as_timestamp | int }}'
    casTime: '{{ states(''sensor.cas_phone_next_alarm'') | as_timestamp | int }}'
    bertHome: '{{ states(''person.bert'') == ''home'' }}'
    casHome: '{{ states(''person.cas_eliens'') == ''home'' }}'
  sequence:
  - choose:
    - conditions:
      - condition: or
        conditions:
        - condition: template
          value_template: '{{ casHome and casTime <= bertTime and casTime > 0}}'
        - condition: template
          value_template: '{{ casHome and bertTime == 0 and casTime > 0 }}'
      sequence:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.alarm_time
        data:
          timestamp: '{{ casTime - 180 }}'
    - conditions:
      - condition: template
        value_template: '{{ bertHome and bertTime > 0 }}'
      sequence:
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.alarm_time
        data:
          timestamp: '{{ bertTime - 180 }}'
    default:
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.alarm_time
      data:
        timestamp: '9999999000'
determine_last_day_of_month:
  alias: Determine last day of month
  sequence:
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.end_of_month
    data:
      datetime: "{%- macro last_dayofmonth(month, year) -%}\n  {%- set daysinmonths\
        \ = [31,28,31,30,31,30,31,31,30,31,30,31] -%}\n  {%- set month = month|int\
        \ -%}  \n  {%- set year = year|int -%}\n  {# Simplified leap year calculation.\
        \ See https://www.mathsisfun.com/leap-years.html #}\n  {%- set isleapyear\
        \ = year % 4 == 0 and (year % 100 != 0 or year % 400 == 0) -%}\n  {%- set\
        \ monthindex = month-1 -%}\n  {%- if month == 2 and isleapyear -%}\n    {{\
        \ daysinmonths[monthindex]+1 }}\n  {%- else -%}\n    {{ daysinmonths[monthindex]\
        \ }}\n  {%- endif -%}\n{%- endmacro -%} {%- set month = now().month -%} {%-\
        \ set year = now().year -%} {%- set lastDay = last_dayofmonth(month, year)\
        \ -%} {%- set lastDayDateString = (year | string) + \"-\" + (month | string)\
        \ + \"-\" + (lastDay | string) + \"T23:59:55\" -%} {%- set lastDayDate = as_datetime(lastDayDateString)\
        \ -%} {{ lastDayDate }}"
  mode: single
turn_off_after_half_hour:
  sequence:
  - delay:
      hours: 0
      minutes: 30
      seconds: 0
      milliseconds: 0
  - service: light.turn_off
    target:
      entity_id: light.everywhere
  - delay:
      hours: 0
      minutes: 0
      seconds: 10
      milliseconds: 0
  - service: light.turn_off
    target:
      entity_id: light.everywhere
  mode: single
  alias: turn off after half hour
boiler_heating:
  alias: Boiler heating
  sequence:
  - service: script.turn_on
    target:
      entity_id: script.radiator_fan_office_on
    data: {}
  - repeat:
      while:
      - condition: state
        entity_id: binary_sensor.heating_required
        state: 'on'
      sequence:
      - service: switch.turn_on
        target:
          entity_id: switch.shelly1_boiler
        data: {}
      - wait_for_trigger:
        - platform: state
          entity_id: binary_sensor.heating_required
          to: 'off'
        timeout: 00:14:50
      - service: switch.turn_off
        target:
          entity_id: switch.shelly1_boiler
        data: {}
      - delay:
          hours: 0
          minutes: 2
          seconds: 0
          milliseconds: 0
  - delay:
      hours: 0
      minutes: 3
      seconds: 0
      milliseconds: 0
  - type: turn_off
    device_id: adca78ce5ccc0f695957716cd0ef5726
    entity_id: switch.tradfri_plug_d
    domain: switch
  mode: restart
  icon: mdi:fire
'1637064927134':
  alias: Start vacuum
  sequence:
  - condition: state
    entity_id: vacuum.noo_noo
    state: docked
    for:
      hours: 15
      minutes: 0
      seconds: 0
      milliseconds: 0
  - service: vacuum.start
    target:
      entity_id: vacuum.noo_noo
  mode: single
  icon: mdi:robot-vacuum
radiator_fan_office_on:
  alias: radiator fan office on
  sequence:
  - delay:
      hours: 0
      minutes: 7
      seconds: 0
      milliseconds: 0
  - condition: state
    entity_id: input_boolean.office_heat
    state: 'on'
  - type: turn_on
    device_id: adca78ce5ccc0f695957716cd0ef5726
    entity_id: switch.tradfri_plug_d
    domain: switch
  mode: restart
doorbell_light:
  alias: doorbell light
  sequence:
  - service: light.turn_on
    data:
      brightness: 92
    target:
      entity_id:
      - light.wled
  - service: select.select_option
    data:
      option: bell
    target:
      entity_id: select.wled_preset
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - service: light.turn_off
    data: {}
    target:
      entity_id: light.wled
  mode: single
