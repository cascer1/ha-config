- sensor:
  - name: "Solar lifetime energy"
    unique_id: solar_lifetime_energy
    state: "{{ (states('sensor.solaredge_lifetime_energy') | float ) / 1000 | round(3) }}"
    unit_of_measurement: "kWh"
    state_class: measurement
  - name: "Energy Consumption (Total)"
    unique_id: energy_consumption_total_custom
    unit_of_measurement: "kWh"
    state_class: measurement
    state: "{{ (states('sensor.energy_consumption_tarif_1')|float + states('sensor.energy_consumption_tarif_2')|float) | round(3) }}"
  - name: "Energy Production (Total)"
    unique_id: energy_production_total_custom
    unit_of_measurement: "kWh"
    state_class: measurement
    state: "{{ (states('sensor.energy_production_tarif_1')|float + states('sensor.energy_production_tarif_2')|float) | round(3) }}"
  - name: "Power Consumption Watt"
    unique_id: power_consumption_watt
    unit_of_measurement: "W"
    state_class: measurement
    state: "{{ (states('sensor.power_consumption')|float) * 1000 }}"
  - name: "Power Production Watt"
    unique_id: power_production_watt
    unit_of_measurement: "W"
    state_class: measurement
    state: "{{ (states('sensor.power_production')|float) * 1000 }}"
  - name: "Energy Consumption Total Watt"
    unique_id: energy_consumption_total_watt
    unit_of_measurement: "Wh"
    state_class: measurement
    state: "{{ (states('sensor.energy_consumption_total_custom') | float) * 1000 | round(3) }}"
  - name: "Energy Production Total Watt"
    unique_id: energy_production_total_watt
    unit_of_measurement: "Wh"
    state_class: measurement
    state: "{{ (states('sensor.energy_production_total_custom') | float) * 1000 | round(3) }}"
  - name: "Energy Consumption Total Daily"
    unique_id: energy_consumption_total_daily
    unit_of_measurement: "kWh"
    state_class: measurement
    state: "{{ (states('sensor.energy_daily_high_meter') | float) + (states('sensor.energy_daily_low_meter') | float) }}"
  - name: "Energy Production Total Daily"
    unique_id: energy_production_total_daily
    unit_of_measurement: "kWh"
    state_class: measurement
    state: "{{ (states('sensor.energy_production_daily_high_meter') | float) + (states('sensor.energy_production_daily_low_meter') | float) }}"
  - name: "Energy Consumption Total Monthly"
    unique_id: energy_consumption_total_monthly
    unit_of_measurement: "kWh"
    state_class: measurement
    state: "{{ (states('sensor.energy_monthly_high_meter') | float) + (states('sensor.energy_monthly_low_meter') | float) }}"
  - name: "Energy Production Total Monthly"
    unique_id: energy_production_total_monthly
    unit_of_measurement: "kWh"
    state_class: measurement
    state: "{{ (states('sensor.energy_production_monthly_high_meter') | float) + (states('sensor.energy_production_monthly_low_meter') | float) }}"
  - name: "Energy Usage Lights"
    unique_id: energy_usage_lights
    unit_of_measurement: "kWh"
    state_class: measurement
    state: "{{  (
( states('sensor.bedroom_ceiling_1_energy') | float ) +
( states('sensor.bedroom_ceiling_2_energy') | float ) +
( states('sensor.dining_table_down_energy') | float ) +
( states('sensor.dining_table_up_energy') | float ) +
( states('sensor.kitchen_cabinets_energy') | float ) +
( states('sensor.kitchen_ceiling_energy') | float ) +
( states('sensor.living_room_ceiling_energy') | float ) +
( states('sensor.living_room_corner_energy') | float ) +
( states('sensor.office_ceiling_energy') | float ) +
( states('sensor.side_kitchen_cabinets_energy') | float ) +
( states('sensor.side_kitchen_ceiling_1_energy') | float ) +
( states('sensor.side_kitchen_ceiling_2_energy') | float ) +
( states('sensor.side_kitchen_window_energy') | float ) +
( states('sensor.upstairs_hallway_ceiling_energy') | float ) +
( states('sensor.upstairs_hallway_spot_stairs_energy') | float ) +
( states('sensor.upstairs_hallway_spot_wall_energy') | float )
      ) | round(3)
}}"
  binary_sensor:
    - name: "Heating required"
      unique_id: heating_required
      state: "{{ states('input_boolean.office_heat') == 'on'
        or states('input_boolean.hallway_heat') == 'on'
        or states('input_boolean.bathroom_heat') == 'on' }}"
